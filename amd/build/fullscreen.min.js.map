{"version":3,"file":"fullscreen.min.js","sources":["../src/fullscreen.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript module for managing fullscreen/exit fullscreen mode in the editor.\n * This module provides functions to enable fullscreen mode and exit fullscreen mode for an editor.\n *\n * @module qtype_coderunner/fullscreen\n * @copyright 2023 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\n\n/**\n * EditorFullscreenToggle class is the base class for all the fullscreen toggle classes.\n * It provides the basic functions for all the fullscreen toggle classes.\n */\nclass EditorFullscreenToggle {\n\n    /**\n     * Represents the question div element.\n     *\n     * @type {HTMLElement}\n     */\n    questionDiv;\n\n    /**\n     * Represents the full screen button.\n     *\n     * @type {HTMLElement}\n     */\n    fullScreenButton;\n\n    /**\n     * Represents the exit fullscreen button.\n     *\n     * @type {HTMLElement}\n     */\n    exitFullscreenButton;\n\n    constructor(questionId) {\n        this.questionDiv = document.getElementById(questionId);\n    }\n\n    /**\n     * Each ui plugin has different editor element wrapper.\n     * This function designed to get the editor element wrapper for the fullscreen zone.\n     */\n    getWrapperElement() {}\n\n    /**\n     * Save original height of the editor.\n     */\n    saveCurrentEditorSize() {}\n\n    /**\n     * Reset the editor to the original size.\n     */\n    resetEditorToSavedSize() {}\n\n    /**\n     * Initialize elements for the fullscreen toggle.\n     *\n     * @param {String} fieldId The id of answer field.\n     */\n    initFullScreenToggle(fieldId) {\n        // Initialize wrapper editor.\n        this.questionDiv = document.getElementById(questionId);\n\n        const wrapperEditor = document.getElementById(`${fieldId}_wrapper`);\n        this.fullScreenButton = this.questionDiv.querySelector('.button-fullscreen');\n        this.exitFullscreenButton = this.questionDiv.querySelector('.button-exit-fullscreen');\n\n        // When load successfully, show the screen mode element and the fullscreen button.\n        this.fullScreenButton.classList.remove('d-none');\n\n        // Attach an event to the fullscreen/exit-fullscreen button.\n        this.fullScreenButton.addEventListener('click', this.enterFullscreen.bind(this, wrapperEditor));\n        this.exitFullscreenButton.addEventListener('click', this.exitFullscreen.bind(this));\n    }\n\n    /**\n     * Make the editor fullscreen.\n     *\n     * @param {HTMLElement} wrapperEditor The wrapper editor element.\n     * @param {Event} e The click event.\n     */\n    enterFullscreen(wrapperEditor, e) {\n        e.preventDefault();\n        this.saveCurrentEditorSize(wrapperEditor);\n        this.fullScreenButton.classList.add('d-none');\n        // Append exit fullscreen button to the wrapper editor.\n        // So that when in the fullscreen mode, the exit fullscreen button will be in the wrapper editor.\n        wrapperEditor.append(this.exitFullscreenButton);\n        // Handle fullscreen event.\n        wrapperEditor.addEventListener('fullscreenchange', () => {\n            // When exit fullscreen.\n            if (document.fullscreenElement === null) {\n                this.resetEditorToSavedSize(wrapperEditor);\n                this.exitFullscreenButton.classList.add('d-none');\n                this.fullScreenButton.classList.remove('d-none');\n            } else {\n                this.exitFullscreenButton.classList.remove('d-none');\n            }\n        });\n\n        wrapperEditor.requestFullscreen().catch(Notification.exception);\n    }\n\n    /**\n     * Exit fullscreen mode.\n     *\n     * @param {Event} e The click event.\n     */\n    exitFullscreen(e) {\n        e.preventDefault();\n        document.exitFullscreen();\n    }\n}\n\n/**\n * AceEditorFullscreenToggle is handle the fullscreen mode for the Ace editor.\n */\nclass AceEditorFullscreenToggle extends EditorFullscreenToggle {\n\n    /**\n     * Represents the size configuration of the Ace editor.\n     *\n     * @type {Object}\n     */\n    editorSize = {};\n\n    constructor(questionId) {\n        super(questionId);\n    }\n    getWrapperElement(fieldId) {\n        return document.getElementById(`${fieldId}_wrapper`);\n    }\n\n    saveCurrentEditorSize(wrapperEditor) {\n        this.editorSize.wrapper = wrapperEditor.style.minHeight;\n        this.editorSize.heightWraper = wrapperEditor.style.height;\n        this.editorSize.editor = this.questionDiv.querySelector('.ace_editor').style.height;\n        this.editorSize.content = this.questionDiv.querySelector('.ace_content').style.height;\n    }\n\n    resetEditorToSavedSize(wrapperEditor) {\n        wrapperEditor.style.minHeight = this.editorSize.wrapper;\n        wrapperEditor.style.height = this.editorSize.heightWraper;\n        this.questionDiv.querySelector('.ace_editor').style.height = this.editorSize.editor;\n        this.questionDiv.querySelector('.ace_content').style.height = this.editorSize.content;\n    }\n}\n\n/**\n * Initialize the full screen.\n *\n * @param {String} questionId id of the outer question div.\n * @param {String} fieldId The id of answer field.\n * @param {String} uiPluginType The input UI type.\n */\nexport const init = (questionId, fieldId, uiPluginType) => {\n    switch (uiPluginType) {\n        case 'ace':\n            new AceEditorFullscreenToggle(questionId).initFullScreenToggle(fieldId);\n            break;\n        case 'ace_gapfiller':\n            new AceEditorFullscreenToggle(questionId).initFullScreenToggle(fieldId);\n            break;\n        default:\n            return;\n    }\n};\n"],"names":["AceEditorFullscreenToggle","constructor","questionId","questionDiv","document","getElementById","getWrapperElement","saveCurrentEditorSize","resetEditorToSavedSize","initFullScreenToggle","fieldId","wrapperEditor","fullScreenButton","this","querySelector","exitFullscreenButton","classList","remove","addEventListener","enterFullscreen","bind","exitFullscreen","e","preventDefault","add","append","fullscreenElement","requestFullscreen","catch","Notification","exception","editorSize","wrapper","style","minHeight","heightWraper","height","editor","content","uiPluginType"],"mappings":"0aA0IMA,wCAnFFC,YAAYC,gKACHC,YAAcC,SAASC,eAAeH,YAO/CI,qBAKAC,yBAKAC,0BAOAC,qBAAqBC,cAEZP,YAAcC,SAASC,eAAeH,kBAErCS,cAAgBP,SAASC,yBAAkBK,0BAC5CE,iBAAmBC,KAAKV,YAAYW,cAAc,2BAClDC,qBAAuBF,KAAKV,YAAYW,cAAc,gCAGtDF,iBAAiBI,UAAUC,OAAO,eAGlCL,iBAAiBM,iBAAiB,QAASL,KAAKM,gBAAgBC,KAAKP,KAAMF,qBAC3EI,qBAAqBG,iBAAiB,QAASL,KAAKQ,eAAeD,KAAKP,OASjFM,gBAAgBR,cAAeW,GAC3BA,EAAEC,sBACGhB,sBAAsBI,oBACtBC,iBAAiBI,UAAUQ,IAAI,UAGpCb,cAAcc,OAAOZ,KAAKE,sBAE1BJ,cAAcO,iBAAiB,oBAAoB,KAEZ,OAA/Bd,SAASsB,wBACJlB,uBAAuBG,oBACvBI,qBAAqBC,UAAUQ,IAAI,eACnCZ,iBAAiBI,UAAUC,OAAO,gBAElCF,qBAAqBC,UAAUC,OAAO,aAInDN,cAAcgB,oBAAoBC,MAAMC,sBAAaC,WAQzDT,eAAeC,GACXA,EAAEC,iBACFnB,SAASiB,mBAgBbpB,YAAYC,kBACFA,8CAHG,IAKbI,kBAAkBI,gBACPN,SAASC,yBAAkBK,qBAGtCH,sBAAsBI,oBACboB,WAAWC,QAAUrB,cAAcsB,MAAMC,eACzCH,WAAWI,aAAexB,cAAcsB,MAAMG,YAC9CL,WAAWM,OAASxB,KAAKV,YAAYW,cAAc,eAAemB,MAAMG,YACxEL,WAAWO,QAAUzB,KAAKV,YAAYW,cAAc,gBAAgBmB,MAAMG,OAGnF5B,uBAAuBG,eACnBA,cAAcsB,MAAMC,UAAYrB,KAAKkB,WAAWC,QAChDrB,cAAcsB,MAAMG,OAASvB,KAAKkB,WAAWI,kBACxChC,YAAYW,cAAc,eAAemB,MAAMG,OAASvB,KAAKkB,WAAWM,YACxElC,YAAYW,cAAc,gBAAgBmB,MAAMG,OAASvB,KAAKkB,WAAWO,uBAWlE,CAACpC,WAAYQ,QAAS6B,uBAC9BA,kBACC,UAGA,oBACGvC,0BAA0BE,YAAYO,qBAAqBC"}