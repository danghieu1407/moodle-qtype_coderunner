{"version":3,"file":"fullscreen.min.js","sources":["../src/fullscreen.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript module for managing fullscreen/exit fullscreen mode in the editor.\n * This module provides functions to enable fullscreen mode and exit fullscreen mode for an editor.\n *\n * @module qtype_coderunner/fullscreen\n * @copyright 2023 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\n\n/**\n * FullscreenToggle class is the base class for all the fullscreen toggle classes.\n * It provides the basic functions for all the fullscreen toggle classes.\n */\nclass EditorFullscreenToggle {\n\n    /**\n     * Represents the question div element.\n     * @type HTMLElement\n     */\n    questionDiv;\n\n    /**\n     * Represents the full screen button.\n     *\n     * @type HTMLElement\n     */\n    fullScreenButton;\n\n    /**\n     * Represents the exit fullscreen button.\n     *\n     * @type HTMLElement\n     */\n    exitFullscreenButton;\n\n    constructor(questionId) {\n        this.questionDiv = document.getElementById(questionId);\n    }\n    /**\n     * Each ui plugin has different editor element.\n     * This function designed to get the editor element for the fullscreen zone.\n     */\n    getWrapperElement() {}\n\n    /**\n     * Save original height of the editor.\n     */\n    saveCurrentEditorSize() {}\n\n    /**\n     * Reset the editor to the original size.\n     */\n    resetEditorToSavedSize() {}\n\n    /**\n     * Initialize the fullscreen toggle.\n     *\n     * @param {string} fieldId The id of answer field.\n     */\n    initFullScreenToggle(fieldId) {\n        // Initialize wrapper editor and screen mode button.\n        const wrapperEditor = this.getWrapperElement(fieldId);\n        const screenModeButton = this.questionDiv.querySelector('.screen-mode-button');\n        // The screen mode button is a parent of the fullscreen button and exit fullscreen button.\n        // Append the screen mode button to the wrapper editor to make be a child of the wrapper editor.\n        // So that when in the fullscreen mode, the exit fullscreen button will be in the wrapper editor.\n        wrapperEditor.append(screenModeButton);\n\n        this.fullScreenButton = this.questionDiv.querySelector('.button-fullscreen');\n        this.exitFullscreenButton = this.questionDiv.querySelector('.button-exit-fullscreen');\n\n        // When load successfully, show the fullscreen button.\n        this.fullScreenButton.classList.remove('d-none');\n        // Attach an event to the fullscreen/exit-fullscreen button.\n        this.enterFullscreen(wrapperEditor);\n        this.exitFullscreen();\n    }\n\n    /**\n     * Handle click event on the fullscreen button.\n     *\n     * @param {HTMLElement} wrapperEditor The wrapper editor element.\n     */\n    enterFullscreen(wrapperEditor) {\n        this.fullScreenButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.saveCurrentEditorSize(wrapperEditor);\n            this.fullScreenButton.classList.add('d-none');\n            // Handle fullscreen event.\n            wrapperEditor.addEventListener('fullscreenchange', () => {\n                // When exit fullscreen.\n                if (document.fullscreenElement === null) {\n                    this.resetEditorToSavedSize(wrapperEditor);\n                    this.exitFullscreenButton.classList.add('d-none');\n                    this.fullScreenButton.classList.remove('d-none');\n                } else {\n                    this.exitFullscreenButton.classList.remove('d-none');\n                }\n            });\n\n            wrapperEditor.requestFullscreen().catch(Notification.exception);\n        });\n    }\n\n    /**\n     * Handle click event on the exit fullscreen button.\n     * When click the exit fullscreen button, the editor will exit fullscreen mode.\n     */\n    exitFullscreen() {\n        // Attach an event to the exit fullscreen button.\n        this.exitFullscreenButton.addEventListener('click', e => {\n            e.preventDefault();\n            document.exitFullscreen();\n        });\n    }\n}\n\n\nclass AceEditorFullscreenToggle extends EditorFullscreenToggle {\n\n    /**\n     * Represents the size configuration of the Ace editor.\n     * @type {Object}\n     */\n    editorSize = {};\n\n    constructor(questionId) {\n        super(questionId);\n    }\n    getWrapperElement(fieldId) {\n        return document.getElementById(`${fieldId}_wrapper`);\n    }\n\n    saveCurrentEditorSize(wrapperEditor) {\n        this.editorSize.wrapper = wrapperEditor.style.minHeight;\n        this.editorSize.heightWraper = wrapperEditor.style.height;\n        this.editorSize.editor = this.questionDiv.querySelector('.ace_editor').style.height;\n        this.editorSize.content = this.questionDiv.querySelector('.ace_content').style.height;\n    }\n\n    resetEditorToSavedSize(wrapperEditor) {\n        wrapperEditor.style.minHeight = this.editorSize.wrapper;\n        wrapperEditor.style.height = this.editorSize.heightWraper;\n        this.questionDiv.querySelector('.ace_editor').style.height = this.editorSize.editor;\n        this.questionDiv.querySelector('.ace_content').style.height = this.editorSize.content;\n    }\n}\n\n/**\n * Initialize the full screen.\n *\n * @param {string} questionId id of the outer question div.\n * @param {string} fieldId The id of answer field.\n * @param {string} uiPluginType The input UI type.\n */\nexport const init = (questionId, fieldId, uiPluginType) => {\n    let editorObject;\n    switch (uiPluginType) {\n        case 'ace':\n            editorObject = new AceEditorFullscreenToggle(questionId);\n            break;\n        case 'ace_gapfiller':\n            editorObject = new AceEditorFullscreenToggle(questionId);\n            break;\n        default:\n            return;\n    }\n\n    editorObject.initFullScreenToggle(fieldId);\n};\n"],"names":["AceEditorFullscreenToggle","constructor","questionId","questionDiv","document","getElementById","getWrapperElement","saveCurrentEditorSize","resetEditorToSavedSize","initFullScreenToggle","fieldId","wrapperEditor","this","screenModeButton","querySelector","append","fullScreenButton","exitFullscreenButton","classList","remove","enterFullscreen","exitFullscreen","addEventListener","e","preventDefault","add","fullscreenElement","requestFullscreen","catch","Notification","exception","editorSize","wrapper","style","minHeight","heightWraper","height","editor","content","uiPluginType","editorObject"],"mappings":"0aAyIMA,wCAnFFC,YAAYC,gKACHC,YAAcC,SAASC,eAAeH,YAM/CI,qBAKAC,yBAKAC,0BAOAC,qBAAqBC,eAEXC,cAAgBC,KAAKN,kBAAkBI,SACvCG,iBAAmBD,KAAKT,YAAYW,cAAc,uBAIxDH,cAAcI,OAAOF,uBAEhBG,iBAAmBJ,KAAKT,YAAYW,cAAc,2BAClDG,qBAAuBL,KAAKT,YAAYW,cAAc,gCAGtDE,iBAAiBE,UAAUC,OAAO,eAElCC,gBAAgBT,oBAChBU,iBAQTD,gBAAgBT,oBACPK,iBAAiBM,iBAAiB,SAAUC,IAC7CA,EAAEC,sBACGjB,sBAAsBI,oBACtBK,iBAAiBE,UAAUO,IAAI,UAEpCd,cAAcW,iBAAiB,oBAAoB,KAEZ,OAA/BlB,SAASsB,wBACJlB,uBAAuBG,oBACvBM,qBAAqBC,UAAUO,IAAI,eACnCT,iBAAiBE,UAAUC,OAAO,gBAElCF,qBAAqBC,UAAUC,OAAO,aAInDR,cAAcgB,oBAAoBC,MAAMC,sBAAaC,cAQ7DT,sBAESJ,qBAAqBK,iBAAiB,SAASC,IAChDA,EAAEC,iBACFpB,SAASiB,sBAcjBpB,YAAYC,kBACFA,8CAHG,IAKbI,kBAAkBI,gBACPN,SAASC,yBAAkBK,qBAGtCH,sBAAsBI,oBACboB,WAAWC,QAAUrB,cAAcsB,MAAMC,eACzCH,WAAWI,aAAexB,cAAcsB,MAAMG,YAC9CL,WAAWM,OAASzB,KAAKT,YAAYW,cAAc,eAAemB,MAAMG,YACxEL,WAAWO,QAAU1B,KAAKT,YAAYW,cAAc,gBAAgBmB,MAAMG,OAGnF5B,uBAAuBG,eACnBA,cAAcsB,MAAMC,UAAYtB,KAAKmB,WAAWC,QAChDrB,cAAcsB,MAAMG,OAASxB,KAAKmB,WAAWI,kBACxChC,YAAYW,cAAc,eAAemB,MAAMG,OAASxB,KAAKmB,WAAWM,YACxElC,YAAYW,cAAc,gBAAgBmB,MAAMG,OAASxB,KAAKmB,WAAWO,uBAWlE,CAACpC,WAAYQ,QAAS6B,oBAClCC,oBACID,kBACC,UAGA,gBACDC,aAAe,IAAIxC,0BAA0BE,iCAMrDsC,aAAa/B,qBAAqBC"}