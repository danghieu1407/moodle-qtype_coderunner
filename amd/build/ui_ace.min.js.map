{"version":3,"file":"ui_ace.min.js","sources":["../src/ui_ace.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript to interface to the Ace editor, which is used both in\r\n * the author editing page and by the student question submission page.\r\n * The class defined in this module is a plugin for the InterfaceWrapper class\r\n * declared in userinterfacewrapper.js. See that file for an explanation of\r\n * the interface to this module.\r\n *\r\n * A special case behaviour of the AceWrapper is that it needs to know\r\n * the Programming language that is being edited. This MUST be provided in\r\n * the constructor params parameter (an associative array) as a string\r\n * with key 'lang'.\r\n *\r\n * @module qtype_coderunner/ui_ace\r\n * @copyright  Richard Lobb, 2015, 2017, The University of Canterbury\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n// Thanks to Ulrich Dangel for the initial implementation of Ace within\r\n// CodeRunner.\r\n\r\n// WARNING: The ace editor must have already been loaded before this\r\n// module is used, as it assumes window.ace exists.\r\n\r\ndefine(['jquery'], function($) {\r\n    const GLOBAL_THEME_KEY = 'qtype_coderunner.ace.theme';\r\n    const ACE_DARK_THEME = 'ace/theme/tomorrow_night';\r\n    const ACE_LIGHT_THEME = 'ace/theme/textmate';\r\n    /**\r\n     * Constructor for the Ace interface object.\r\n     * @param {string} textareaId The ID of the HTML textarea element to be wrapped.\r\n     * @param {int} w The width in pixels of the textarea.\r\n     * @param {int} h The height in pixels of the textarea.\r\n     * @param {object} params The UI parameter object.\r\n     */\r\n    function AceWrapper(textareaId, w, h, params) {\r\n        var textarea = $(document.getElementById(textareaId)),\r\n            wrapper = $(document.getElementById(textareaId + '_wrapper')),\r\n            focused = textarea[0] === document.activeElement,\r\n            lang = params.lang,\r\n            session,\r\n            code,\r\n            t = this;  // For embedded callbacks.\r\n\r\n        try {\r\n            window.ace.require(\"ace/ext/language_tools\");\r\n            this.modelist = window.ace.require('ace/ext/modelist');\r\n            this.textareaId = textareaId;\r\n            this.textarea = textarea;\r\n            this.enabled = false;\r\n            this.contents_changed = false;\r\n            this.capturingTab = false;\r\n            this.clickInProgress = false;\r\n\r\n            this.editNode = $(\"<div></div>\"); // Ace editor manages this\r\n            this.editNode.css({\r\n                resize: 'none',\r\n                height: h,\r\n                width: \"100%\"\r\n            });\r\n\r\n            this.editor = window.ace.edit(this.editNode.get(0));\r\n            if (textarea.prop('readonly')) {\r\n                this.editor.setReadOnly(true);\r\n            }\r\n\r\n            this.editor.setOptions({\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: params.live_autocompletion,\r\n                fontSize: params.font_size ? params.font_size : \"14px\",\r\n                newLineMode: \"unix\",\r\n            });\r\n\r\n            this.editor.$blockScrolling = Infinity;\r\n\r\n            session = this.editor.getSession();\r\n            code = this.textarea.val();\r\n            if (params.import_from_scratchpad === undefined || params.import_from_scratchpad) {\r\n                code = this.extract_from_json_maybe(code);\r\n            }\r\n            session.setValue(code);\r\n\r\n            // If there's a user-defined theme in local storage, use that.\r\n            // Otherwise use the 'prefers-color-scheme' option if given or\r\n            // the question/system defaults if not.\r\n            const userTheme = window.localStorage.getItem(GLOBAL_THEME_KEY);\r\n            const consider_prefers = params.auto_switch_light_dark && window.matchMedia;\r\n            if (userTheme !== null) {\r\n                this.editor.setTheme(userTheme);\r\n            } else if (consider_prefers && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n                this.editor.setTheme(ACE_DARK_THEME);\r\n            } else if (consider_prefers && window.matchMedia('(prefers-color-scheme: light)').matches) {\r\n                this.editor.setTheme(ACE_LIGHT_THEME);\r\n            }  else if (params.theme) {\r\n                this.editor.setTheme(\"ace/theme/\" + params.theme);\r\n            } else {\r\n                this.editor.setTheme(ACE_LIGHT_THEME);\r\n            }\r\n            this.currentTheme = this.editor.getTheme();\r\n\r\n            this.fixSlowLoad();\r\n\r\n            this.setLanguage(lang);\r\n\r\n            this.setEventHandlers(textarea);\r\n            this.captureTab();\r\n\r\n            // Try to tell Moodle about parts of the editor with z-index.\r\n            // It is hard to be sure if this is complete. ACE adds all its CSS using JavaScript.\r\n            // Here, we just deal with things that are known to cause a problem.\r\n            // Can't do these operations until editor has rendered. So ...\r\n            this.editor.renderer.on('afterRender', function() {\r\n                var gutter =  wrapper.find('.ace_gutter');\r\n                if (gutter.hasClass('moodle-has-zindex')) {\r\n                    return;  // So we only do what follows once.\r\n                }\r\n                gutter.addClass('moodle-has-zindex');\r\n\r\n                if (focused) {\r\n                    t.editor.focus();\r\n                    t.editor.navigateFileEnd();\r\n                }\r\n                t.aceLabel = wrapper.find('.answerprompt');\r\n                t.aceLabel.attr('for', 'ace_' + textareaId);\r\n\r\n                t.aceTextarea = wrapper.find('.ace_text-input');\r\n                t.aceTextarea.attr('id', 'ace_' + textareaId);\r\n            });\r\n\r\n            this.fail = false;\r\n        }\r\n        catch(err) {\r\n            // Something ugly happened. Probably ace editor hasn't been loaded\r\n            this.fail = true;\r\n        }\r\n    }\r\n\r\n    AceWrapper.prototype.extract_from_json_maybe = function(code) {\r\n        // If the given code looks like JSON from the Scratchpad UI,\r\n        // extract and return the answer_code attribute.\r\n        try {\r\n            const jsonObj = JSON.parse(code);\r\n            code = jsonObj.answer_code[0];\r\n        } catch(err) {}\r\n\r\n        return code;\r\n    };\r\n\r\n    AceWrapper.prototype.failed = function() {\r\n        return this.fail;\r\n    };\r\n\r\n    AceWrapper.prototype.failMessage = function() {\r\n        return 'ace_ui_notready';\r\n    };\r\n\r\n    // Sync to TextArea\r\n    AceWrapper.prototype.sync = function() {\r\n        // The data is always sync'd to the text area. But here we use sync to\r\n        // poll the value of the current theme and record in browser local\r\n        // storage if the value for this particular Ace instance has changed\r\n        // from the current working theme (set by code),\r\n        // implying a user menu action. If that happens the global user theme\r\n        // is set and is subsequently used by all Ace windows.\r\n        const thisThemeNow = this.editor.getTheme();\r\n        const globalTheme = window.localStorage.getItem(GLOBAL_THEME_KEY);\r\n        if (thisThemeNow !== this.currentTheme) {\r\n            // User has changed the theme via menu. Record in global storage so\r\n            // other editor instances can switch to it.\r\n            this.currentTheme = thisThemeNow;\r\n            window.localStorage.setItem(GLOBAL_THEME_KEY, thisThemeNow);\r\n            // console.log(`Menu theme change. Global theme now ${thisThemeNow}`);\r\n        } else if (globalTheme && thisThemeNow != globalTheme) {\r\n            // Another window has set the theme (since if there had been a\r\n            // global theme when we started, we'd have used it.\r\n            this.editor.setTheme(globalTheme);\r\n            this.currentTheme = globalTheme;\r\n            // console.log(`Global theme change found: ${globalTheme}`);\r\n        }\r\n    };\r\n\r\n    AceWrapper.prototype.syncIntervalSecs = function() {\r\n        return 2;\r\n    };\r\n\r\n    AceWrapper.prototype.setLanguage = function(language) {\r\n        var session = this.editor.getSession(),\r\n            mode = this.findMode(language);\r\n        if (mode) {\r\n            session.setMode(mode.mode);\r\n        }\r\n    };\r\n\r\n    AceWrapper.prototype.getElement = function() {\r\n        return this.editNode;\r\n    };\r\n\r\n    AceWrapper.prototype.captureTab = function () {\r\n        this.capturingTab = true;\r\n        this.editor.commands.bindKeys({'Tab': 'indent', 'Shift-Tab': 'outdent'});\r\n    };\r\n\r\n    AceWrapper.prototype.releaseTab = function () {\r\n        this.capturingTab = false;\r\n        this.editor.commands.bindKeys({'Tab': null, 'Shift-Tab': null});\r\n    };\r\n\r\n    // Sometimes Ace editors do not load until the mouse is moved. To fix this,\r\n    // 'move' the mouse using JQuery when the editor div enters the viewport.\r\n    AceWrapper.prototype.fixSlowLoad = function () {\r\n        const observer = new IntersectionObserver( () => {\r\n            $(document).trigger('mousemove');\r\n        });\r\n        const editNode = this.editNode.get(0); // Non-JQuerry node.\r\n        observer.observe(editNode);\r\n    };\r\n\r\n    AceWrapper.prototype.setEventHandlers = function () {\r\n        var TAB = 9,\r\n            ESC = 27,\r\n            KEY_M = 77,\r\n            t = this;\r\n\r\n        this.editor.getSession().on('change', function() {\r\n            t.textarea.val(t.editor.getSession().getValue());\r\n            t.contents_changed = true;\r\n        });\r\n\r\n        this.editor.on('blur', function() {\r\n            if (t.contents_changed) {\r\n                t.textarea.trigger('change');\r\n            }\r\n        });\r\n\r\n        this.editor.on('mousedown', function() {\r\n            // Event order seems to be (\\ is where the mouse button is pressed, / released):\r\n            // Chrome: \\ mousedown, mouseup, focusin / click.\r\n            // Firefox/IE: \\ mousedown, focusin / mouseup, click.\r\n            t.clickInProgress = true;\r\n        });\r\n\r\n        this.editor.on('focus', function() {\r\n            if (t.clickInProgress) {\r\n                t.captureTab();\r\n            } else {\r\n                t.releaseTab();\r\n            }\r\n        });\r\n\r\n        this.editor.on('click', function() {\r\n            t.clickInProgress = false;\r\n        });\r\n\r\n        this.editor.container.addEventListener('keydown', function(e) {\r\n            if (e.which === undefined || e.which !== 0) { // Normal keypress?\r\n                if (e.keyCode === KEY_M && e.ctrlKey && !e.altKey) {\r\n                    if (t.capturingTab) {\r\n                        t.releaseTab();\r\n                    } else {\r\n                        t.captureTab();\r\n                    }\r\n                    e.preventDefault(); // Firefox uses this for mute audio in current browser tab.\r\n                }\r\n                else if (e.keyCode === ESC) {\r\n                    t.releaseTab();\r\n                }\r\n                else if (!(e.shiftKey || e.ctrlKey || e.altKey || e.keyCode == TAB)) {\r\n                    t.captureTab();\r\n                }\r\n            }\r\n        }, true);\r\n    };\r\n\r\n    AceWrapper.prototype.destroy = function () {\r\n        var focused;\r\n        if (!this.fail) {\r\n            // Proceed only if this wrapper was correctly constructed\r\n            focused = this.editor.isFocused();\r\n            this.textarea.val(this.editor.getSession().getValue()); // Copy data back\r\n            this.editor.destroy();\r\n            $(this.editNode).remove();\r\n            if (focused) {\r\n                this.textarea.focus();\r\n                this.textarea[0].selectionStart = this.textarea[0].value.length;\r\n            }\r\n        }\r\n    };\r\n\r\n    AceWrapper.prototype.hasFocus = function() {\r\n        return this.editor.isFocused();\r\n    };\r\n\r\n    AceWrapper.prototype.findMode = function (language) {\r\n        var candidate,\r\n            filename,\r\n            result,\r\n            candidates = [], // List of candidate modes.\r\n            nameMap = {\r\n                'octave': 'matlab',\r\n                'nodejs': 'javascript',\r\n                'c#': 'cs'\r\n            };\r\n\r\n        if (typeof language !== 'string') {\r\n            return undefined;\r\n        }\r\n        if (language.toLowerCase() in nameMap) {\r\n            language = nameMap[language.toLowerCase()];\r\n        }\r\n\r\n        candidates = [language, language.replace(/\\d+$/, \"\")];\r\n        for (var i = 0; i < candidates.length; i++) {\r\n            candidate = candidates[i];\r\n            filename = \"input.\" + candidate;\r\n            result = this.modelist.modesByName[candidate] ||\r\n                this.modelist.modesByName[candidate.toLowerCase()] ||\r\n                this.modelist.getModeForPath(filename) ||\r\n                this.modelist.getModeForPath(filename.toLowerCase());\r\n\r\n            if (result && result.name !== 'text') {\r\n                return result;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    AceWrapper.prototype.resize = function(w, h) {\r\n        this.editNode.outerHeight(h);\r\n        this.editNode.outerWidth(w);\r\n        this.editor.resize();\r\n    };\r\n\r\n    AceWrapper.prototype.allowFullScreen = function() {\r\n        return true;\r\n    }\r\n\r\n     return {\r\n        Constructor: AceWrapper\r\n    };\r\n});\r\n"],"names":["define","$","AceWrapper","textareaId","w","h","params","session","code","textarea","document","getElementById","wrapper","focused","activeElement","lang","t","this","window","ace","require","modelist","enabled","contents_changed","capturingTab","clickInProgress","editNode","css","resize","height","width","editor","edit","get","prop","setReadOnly","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","live_autocompletion","fontSize","font_size","newLineMode","$blockScrolling","Infinity","getSession","val","undefined","import_from_scratchpad","extract_from_json_maybe","setValue","userTheme","localStorage","getItem","consider_prefers","auto_switch_light_dark","matchMedia","setTheme","matches","theme","currentTheme","getTheme","fixSlowLoad","setLanguage","setEventHandlers","captureTab","renderer","on","gutter","find","hasClass","addClass","focus","navigateFileEnd","aceLabel","attr","aceTextarea","fail","err","prototype","JSON","parse","answer_code","failed","failMessage","sync","thisThemeNow","globalTheme","setItem","syncIntervalSecs","language","mode","findMode","setMode","getElement","commands","bindKeys","releaseTab","observer","IntersectionObserver","trigger","observe","getValue","container","addEventListener","e","which","keyCode","ctrlKey","altKey","preventDefault","shiftKey","destroy","isFocused","remove","selectionStart","value","length","hasFocus","candidate","filename","result","candidates","nameMap","toLowerCase","replace","i","modesByName","getModeForPath","name","outerHeight","outerWidth","allowFullScreen","Constructor"],"mappings":";;;;;;;;;;;;;;;;AAsCAA,iCAAO,CAAC,WAAW,SAASC,YAWfC,WAAWC,WAAYC,EAAGC,EAAGC,YAK9BC,QACAC,KALAC,SAAWR,EAAES,SAASC,eAAeR,aACrCS,QAAUX,EAAES,SAASC,eAAeR,WAAa,aACjDU,QAAUJ,SAAS,KAAOC,SAASI,cACnCC,KAAOT,OAAOS,KAGdC,EAAIC,SAGJC,OAAOC,IAAIC,QAAQ,+BACdC,SAAWH,OAAOC,IAAIC,QAAQ,yBAC9BjB,WAAaA,gBACbM,SAAWA,cACXa,SAAU,OACVC,kBAAmB,OACnBC,cAAe,OACfC,iBAAkB,OAElBC,SAAWzB,EAAE,oBACbyB,SAASC,IAAI,CACdC,OAAQ,OACRC,OAAQxB,EACRyB,MAAO,cAGNC,OAASb,OAAOC,IAAIa,KAAKf,KAAKS,SAASO,IAAI,IAC5CxB,SAASyB,KAAK,kBACTH,OAAOI,aAAY,QAGvBJ,OAAOK,WAAW,CACnBC,2BAA2B,EAC3BC,yBAA0BhC,OAAOiC,oBACjCC,SAAUlC,OAAOmC,UAAYnC,OAAOmC,UAAY,OAChDC,YAAa,cAGZX,OAAOY,gBAAkBC,EAAAA,EAE9BrC,QAAUU,KAAKc,OAAOc,aACtBrC,KAAOS,KAAKR,SAASqC,YACiBC,IAAlCzC,OAAO0C,wBAAwC1C,OAAO0C,0BACtDxC,KAAOS,KAAKgC,wBAAwBzC,OAExCD,QAAQ2C,SAAS1C,YAKX2C,UAAYjC,OAAOkC,aAAaC,QA5DrB,8BA6DXC,iBAAmBhD,OAAOiD,wBAA0BrC,OAAOsC,WAC/C,OAAdL,eACKpB,OAAO0B,SAASN,WACdG,kBAAoBpC,OAAOsC,WAAW,gCAAgCE,aACxE3B,OAAO0B,SAhED,4BAiEJH,kBAAoBpC,OAAOsC,WAAW,iCAAiCE,aACzE3B,OAAO0B,SAjEA,sBAkEJnD,OAAOqD,WACV5B,OAAO0B,SAAS,aAAenD,OAAOqD,YAEtC5B,OAAO0B,SArEA,2BAuEXG,aAAe3C,KAAKc,OAAO8B,gBAE3BC,mBAEAC,YAAYhD,WAEZiD,iBAAiBvD,eACjBwD,kBAMAlC,OAAOmC,SAASC,GAAG,eAAe,eAC/BC,OAAUxD,QAAQyD,KAAK,eACvBD,OAAOE,SAAS,uBAGpBF,OAAOG,SAAS,qBAEZ1D,UACAG,EAAEe,OAAOyC,QACTxD,EAAEe,OAAO0C,mBAEbzD,EAAE0D,SAAW9D,QAAQyD,KAAK,iBAC1BrD,EAAE0D,SAASC,KAAK,MAAO,OAASxE,YAEhCa,EAAE4D,YAAchE,QAAQyD,KAAK,mBAC7BrD,EAAE4D,YAAYD,KAAK,KAAM,OAASxE,qBAGjC0E,MAAO,EAEhB,MAAMC,UAEGD,MAAO,UAIpB3E,WAAW6E,UAAU9B,wBAA0B,SAASzC,UAKhDA,KADgBwE,KAAKC,MAAMzE,MACZ0E,YAAY,GAC7B,MAAMJ,aAEDtE,MAGXN,WAAW6E,UAAUI,OAAS,kBACnBlE,KAAK4D,MAGhB3E,WAAW6E,UAAUK,YAAc,iBACxB,mBAIXlF,WAAW6E,UAAUM,KAAO,iBAOlBC,aAAerE,KAAKc,OAAO8B,WAC3B0B,YAAcrE,OAAOkC,aAAaC,QA5InB,8BA6IjBiC,eAAiBrE,KAAK2C,mBAGjBA,aAAe0B,aACpBpE,OAAOkC,aAAaoC,QAjJH,6BAiJ6BF,eAEvCC,aAAeD,cAAgBC,mBAGjCxD,OAAO0B,SAAS8B,kBAChB3B,aAAe2B,cAK5BrF,WAAW6E,UAAUU,iBAAmB,kBAC7B,GAGXvF,WAAW6E,UAAUhB,YAAc,SAAS2B,cACpCnF,QAAUU,KAAKc,OAAOc,aACtB8C,KAAO1E,KAAK2E,SAASF,UACrBC,MACApF,QAAQsF,QAAQF,KAAKA,OAI7BzF,WAAW6E,UAAUe,WAAa,kBACvB7E,KAAKS,UAGhBxB,WAAW6E,UAAUd,WAAa,gBACzBzC,cAAe,OACfO,OAAOgE,SAASC,SAAS,KAAQ,qBAAuB,aAGjE9F,WAAW6E,UAAUkB,WAAa,gBACzBzE,cAAe,OACfO,OAAOgE,SAASC,SAAS,KAAQ,iBAAmB,QAK7D9F,WAAW6E,UAAUjB,YAAc,iBACzBoC,SAAW,IAAIC,sBAAsB,KACvClG,EAAES,UAAU0F,QAAQ,gBAElB1E,SAAWT,KAAKS,SAASO,IAAI,GACnCiE,SAASG,QAAQ3E,WAGrBxB,WAAW6E,UAAUf,iBAAmB,eAIhChD,EAAIC,UAEHc,OAAOc,aAAasB,GAAG,UAAU,WAClCnD,EAAEP,SAASqC,IAAI9B,EAAEe,OAAOc,aAAayD,YACrCtF,EAAEO,kBAAmB,UAGpBQ,OAAOoC,GAAG,QAAQ,WACfnD,EAAEO,kBACFP,EAAEP,SAAS2F,QAAQ,kBAItBrE,OAAOoC,GAAG,aAAa,WAIxBnD,EAAES,iBAAkB,UAGnBM,OAAOoC,GAAG,SAAS,WAChBnD,EAAES,gBACFT,EAAEiD,aAEFjD,EAAEiF,qBAILlE,OAAOoC,GAAG,SAAS,WACpBnD,EAAES,iBAAkB,UAGnBM,OAAOwE,UAAUC,iBAAiB,WAAW,SAASC,QACvC1D,IAAZ0D,EAAEC,OAAmC,IAAZD,EAAEC,QAlCvB,KAmCAD,EAAEE,SAAqBF,EAAEG,UAAYH,EAAEI,QACnC7F,EAAEQ,aACFR,EAAEiF,aAEFjF,EAAEiD,aAENwC,EAAEK,kBA1CJ,KA4COL,EAAEE,QACP3F,EAAEiF,aAEKQ,EAAEM,UAAYN,EAAEG,SAAWH,EAAEI,QAhDtC,GAgDgDJ,EAAEE,SAChD3F,EAAEiD,iBAGX,IAGP/D,WAAW6E,UAAUiC,QAAU,eACvBnG,QACCI,KAAK4D,OAENhE,QAAUI,KAAKc,OAAOkF,iBACjBxG,SAASqC,IAAI7B,KAAKc,OAAOc,aAAayD,iBACtCvE,OAAOiF,UACZ/G,EAAEgB,KAAKS,UAAUwF,SACbrG,eACKJ,SAAS+D,aACT/D,SAAS,GAAG0G,eAAiBlG,KAAKR,SAAS,GAAG2G,MAAMC,UAKrEnH,WAAW6E,UAAUuC,SAAW,kBACrBrG,KAAKc,OAAOkF,aAGvB/G,WAAW6E,UAAUa,SAAW,SAAUF,cAClC6B,UACAC,SACAC,OACAC,WACAC,QAAU,QACI,gBACA,kBACJ,SAGU,iBAAbjC,UAGPA,SAASkC,gBAAiBD,UAC1BjC,SAAWiC,QAAQjC,SAASkC,gBAGhCF,WAAa,CAAChC,SAAUA,SAASmC,QAAQ,OAAQ,SAC5C,IAAIC,EAAI,EAAGA,EAAIJ,WAAWL,OAAQS,OAEnCN,SAAW,UADXD,UAAYG,WAAWI,KAEvBL,OAASxG,KAAKI,SAAS0G,YAAYR,YAC/BtG,KAAKI,SAAS0G,YAAYR,UAAUK,gBACpC3G,KAAKI,SAAS2G,eAAeR,WAC7BvG,KAAKI,SAAS2G,eAAeR,SAASI,iBAEZ,SAAhBH,OAAOQ,YACVR,SAMnBvH,WAAW6E,UAAUnD,OAAS,SAASxB,EAAGC,QACjCqB,SAASwG,YAAY7H,QACrBqB,SAASyG,WAAW/H,QACpB2B,OAAOH,UAGhB1B,WAAW6E,UAAUqD,gBAAkB,kBAC5B,GAGH,CACJC,YAAanI"}